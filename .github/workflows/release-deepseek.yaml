name: "Prepare Multiplatform Release"

on:
  push:
    tags:
      - "release-*"
  workflow_dispatch:

permissions:
  contents: write

env:
  BUILD_DIR: build
  TAG_NAME: ${{ github.ref_name || format('release-{0}', github.run_id) }}

jobs:
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: CMake configure
        run: cmake -B $BUILD_DIR -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: make -C$BUILD_DIR -j$(sysctl -n hw.ncpu) steam_api
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: |
            $BUILD_DIR/libsteam_api.dylib
            $BUILD_DIR/lobby_connect
            $BUILD_DIR/generate_interfaces_file

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libprotobuf-dev protobuf-compiler
      - name: CMake configure
        run: cmake -B $BUILD_DIR -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: make -C$BUILD_DIR -j$(nproc)
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: |
            $BUILD_DIR/libsteam_api.so
            $BUILD_DIR/lobby_connect
            $BUILD_DIR/generate_interfaces

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg install protobuf --triplet x86-windows-static
          ./vcpkg install protobuf --triplet x64-windows-static
      - name: CMake configure
        run: cmake -B $BUILD_DIR -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
      - name: Build
        run: cmake --build $BUILD_DIR --config Release
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            $BUILD_DIR/Release/steam_api.dll
            $BUILD_DIR/Release/lobby_connect.exe
            $BUILD_DIR/Release/generate_interfaces.exe

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-macos, build-linux, build-windows]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Release ${{ env.TAG_NAME }}"
          files: |
            artifacts/macos-binaries/*
            artifacts/linux-binaries/*
            artifacts/windows-binaries/*
          generate_release_notes: true
